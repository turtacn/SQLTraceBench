#!/bin/bash

# A bilingual (English/中文) demo script to generate fake output for creating a GIF.
# 双语演示脚本，可用于生成 GIF 演示。
# Use a tool like 'asciinema rec' or 'termtosvg' to record this.
# 可使用 'asciinema rec' 或 'termtosvg' 录制。

# ANSI color codes
GREEN='\033[0;32m'
CYAN='\033[0;36m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# --- Language Selector ---
LANGUAGE=${LANGUAGE:-en}  # default English, 默认英文

msg() {
    case $1 in
        cfg_loaded)
            [ "$LANGUAGE" = "zh" ] && echo "配置已从 ./config.yaml 加载" || echo "Configuration loaded from ./config.yaml"
            ;;
        src_db)
            [ "$LANGUAGE" = "zh" ] && echo "源数据库: StarRocks, 目标数据库: ClickHouse" || echo "Source DB: StarRocks, Target DB: ClickHouse"
            ;;
        parse_schema)
            [ "$LANGUAGE" = "zh" ] && echo "解析源模式: ./schemas/starrocks_schema.yml" || echo "Parsing source schema: ./schemas/starrocks_schema.yml"
            ;;
        found_tables)
            [ "$LANGUAGE" = "zh" ] && echo "发现 5 张表和 42 个字段。" || echo "Found 5 tables and 42 columns."
            ;;
        parse_trace)
            [ "$LANGUAGE" = "zh" ] && echo "解析源追踪: ./traces/starrocks_trace.jsonl" || echo "Parsing source trace: ./traces/starrocks_trace.jsonl"
            ;;
        read_events)
            [ "$LANGUAGE" = "zh" ] && echo "读取 1,250,831 条查询事件。" || echo "Read 1,250,831 query events."
            ;;
        templating)
            [ "$LANGUAGE" = "zh" ] && echo "生成 SQL 模板..." || echo "Templating SQL queries..."
            ;;
        gen_templates)
            [ "$LANGUAGE" = "zh" ] && echo "生成 152 个唯一 SQL 模板。" || echo "Generated 152 unique SQL templates."
            ;;
        analyzing)
            [ "$LANGUAGE" = "zh" ] && echo "分析查询参数分布..." || echo "Analyzing query parameter distributions..."
            ;;
        modeled)
            [ "$LANGUAGE" = "zh" ] && echo "已建模参数分布: timestamp, tenant_id, src_ip。" || echo "Modeled distributions for timestamp, tenant_id, src_ip."
            ;;
        warn_agent)
            [ "$LANGUAGE" = "zh" ] && echo "⚠ 参数 'user_agent' 基数过高，使用随机采样。" || echo "⚠ Parameter 'user_agent' has high cardinality, using random sampling."
            ;;
        transform_schema)
            [ "$LANGUAGE" = "zh" ] && echo "转换为 ClickHouse 目标模式..." || echo "Transforming schema for ClickHouse..."
            ;;
        mapping)
            [ "$LANGUAGE" = "zh" ] && echo "映射类型 'BITMAP' → 'AggregateFunction(groupBitmap, UInt64)'。" || echo "Mapping type 'BITMAP' to 'AggregateFunction(groupBitmap, UInt64)'."
            ;;
        translating)
            [ "$LANGUAGE" = "zh" ] && echo "翻译 SQL 模板为 ClickHouse 方言..." || echo "Translating SQL templates to ClickHouse dialect..."
            ;;
        applied_rules)
            [ "$LANGUAGE" = "zh" ] && echo "应用了 12 条方言转换规则。" || echo "Applied 12 dialect-specific rewrite rules."
            ;;
        connect_target)
            [ "$LANGUAGE" = "zh" ] && echo "连接目标数据库 clickhouse-host:9000..." || echo "Connecting to target database at clickhouse-host:9000..."
            ;;
        conn_ok)
            [ "$LANGUAGE" = "zh" ] && echo "连接成功。" || echo "Connection successful."
            ;;
        preparing)
            [ "$LANGUAGE" = "zh" ] && echo "准备基准测试任务..." || echo "Preparing benchmark workload..."
            ;;
        workload_cfg)
            [ "$LANGUAGE" = "zh" ] && echo "并发: 64 工作线程, 时长: 5 分钟, QPS 规模: 1.5x" || echo "Concurrency: 64 workers, Duration: 5m0s, QPS Scale: 1.5x"
            ;;
        starting_bench)
            [ "$LANGUAGE" = "zh" ] && echo "开始基准测试..." || echo "Starting benchmark..."
            ;;
        finished)
            [ "$LANGUAGE" = "zh" ] && echo "基准测试完成。" || echo "Benchmark finished."
            ;;
        gen_report)
            [ "$LANGUAGE" = "zh" ] && echo "生成验证报告..." || echo "Generating validation report..."
            ;;
        comparing)
            [ "$LANGUAGE" = "zh" ] && echo "对比生成的负载指标与源追踪。" || echo "Comparing generated workload metrics against source trace."
            ;;
        report_saved)
            [ "$LANGUAGE" = "zh" ] && echo "报告已保存到 ./reports/report-20250816-1630.md" || echo "Report saved to ./reports/report-20250816-1630.md"
            ;;
    esac
}

echo_step() {
    echo -e "${GREEN}✔${NC} $1"
    sleep 1
}

echo_info() {
    echo -e "${CYAN}i${NC} $1"
    sleep 1
}

echo_warn() {
    echo -e "${YELLOW}⚠${NC} $1"
    sleep 1
}

# --- Start of Demo ---
clear

echo -e "$ sql_trace_bench run --config ./config.yaml"
sleep 3

# Phase 1: Parsing
echo_step "$(msg cfg_loaded)"
echo_info "$(msg src_db)"
echo_step "$(msg parse_schema)"
echo_info "$(msg found_tables)"
echo_step "$(msg parse_trace)"
echo_info "$(msg read_events)"

# Phase 2: Transformation
echo_step "$(msg templating)"
echo_info "$(msg gen_templates)"
echo_step "$(msg analyzing)"
echo_info "$(msg modeled)"
echo_warn "$(msg warn_agent)"
echo_step "$(msg transform_schema)"
echo_info "$(msg mapping)"
echo_step "$(msg translating)"
echo_info "$(msg applied_rules)"

# Phase 3: Workload Generation
echo_step "$(msg connect_target)"
echo_info "$(msg conn_ok)"
echo_step "$(msg preparing)"
echo_info "$(msg workload_cfg)"

# Phase 4: Execution
echo_step "$(msg starting_bench)"
sleep 3
for i in {1..20}; do
    echo -ne "[${CYAN}RUNNING${NC}] ${YELLOW}[$(for j in $(seq 1 $i); do echo -n '#'; done)$(for j in $(seq $(($i+1)) 20); do echo -n ' '; done)]${NC} ($((i*5))%) - QPS: 2512.5, Avg Latency: 25.4ms, P95: 68.1ms\r"
    sleep 1
done
echo ""
echo_step "$(msg finished)"

# Phase 5: Reporting
echo_step "$(msg gen_report)"
echo_info "$(msg comparing)"
sleep 3

# Final Report (summary table 不翻译，方便统一格式)
echo ""
echo "+---------------------------------+"
echo "|      BENCHMARK SUMMARY          |"
echo "+----------------+----------------+"
echo "| Metric         | Value          |"
echo "+----------------+----------------+"
echo "| Total Queries  | 753,750        |"
echo "| Avg QPS        | 2512.5         |"
echo "| Avg Latency    | 24.8ms         |"
echo "| P95 Latency    | 65.2ms         |"
echo "| P99 Latency    | 152.9ms        |"
echo "+----------------+----------------+"
echo ""
echo "+---------------------------------+"
echo "|      DEVIATION ANALYSIS         |"
echo "+----------------+----------------+"
echo "| Metric         | Deviation      |"
echo "+----------------+----------------+"
echo -e "| QPS Distribution | ${GREEN}-2.5%${NC}           |"
echo -e "| Avg Latency      | ${YELLOW}+8.1%${NC}           |"
echo -e "| Hotspot Coverage | ${GREEN}-1.8%${NC}           |"
echo "+----------------+----------------+"
echo ""
echo_step "$(msg report_saved)"
