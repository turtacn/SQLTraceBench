#!/bin/bash
# sql_trace_bench-demo - Demo script for SQLTraceBench
# This script creates an interactive demo showing the main capabilities

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Demo data directory
DEMO_DIR="/tmp/sqltracebench_demo"

print_header() {
    echo -e "${BLUE}================================${NC}"
    echo -e "${BLUE}   SQLTraceBench Demo${NC}"
    echo -e "${BLUE}================================${NC}"
    echo ""
}

simulate_typing() {
    local text="$1"
    local delay=${2:-0.03}
    for (( i=0; i<${#text}; i++ )); do
        echo -n "${text:$i:1}"
        sleep $delay
    done
    echo
}

run_demo_step() {
    local step_name="$1"
    local command="$2"
    local description="$3"

    echo -e "${YELLOW}Step: $step_name${NC}"
    echo -e "${GREEN}$description${NC}"
    echo ""
    echo -e "${BLUE}$ $command${NC}"
    sleep 1

    # Execute the actual command or simulate output
    case "$step_name" in
        "Convert")
            simulate_conversion_output
            ;;
        "Generate")
            simulate_generation_output
            ;;
        "Validate")
            simulate_validation_output
            ;;
        *)
            echo "Demo step completed!"
            ;;
    esac
    echo ""
    sleep 2
}

simulate_conversion_output() {
    echo "🔄 Parsing StarRocks schema..."
    sleep 1
    echo "✅ Found 5 tables: warehouse, district, customer, orders, order_line"
    echo "🔄 Converting to ClickHouse dialect..."
    sleep 1
    echo "✅ Schema conversion completed"
    echo "📊 Analyzing SQL trace with 1,247 queries..."
    sleep 1
    echo "✅ Extracted 23 unique SQL templates"
    echo "📁 Output written to ./output/"
}

simulate_generation_output() {
    echo "🔄 Loading parameter models..."
    sleep 1
    echo "✅ Loaded distributions for 156 parameters"
    echo "🎯 Generating workload with QPS=100, hotspot_ratio=0.8..."
    sleep 1
    echo "✅ Generated 500 parameterized queries"
    echo "📈 Workload distribution:"
    echo "   - SELECT: 78%"
    echo "   - UPDATE: 15%"
    echo "   - INSERT: 7%"
    echo "📁 Workload written to ./workload/"
}

simulate_validation_output() {
    echo "🔄 Connecting to ClickHouse..."
    sleep 1
    echo "✅ Connection established"
    echo "🚀 Executing benchmark workload..."
    sleep 2
    echo "📊 Performance Results:"
    echo "   - Average QPS: 98.5"
    echo "   - P95 Latency: 12.3ms"
    echo "   - Success Rate: 99.8%"
    echo "🔍 Validation Results:"
    echo "   - QPS Deviation: 1.5% ✅"
    echo "   - Latency Deviation: 3.2% ✅"
    echo "   - Hotspot Coverage: 82% ✅"
    echo "📁 Report generated at ./results/report.html"
}

main() {
    print_header

    echo -e "${GREEN}This demo shows SQLTraceBench converting StarRocks traces to ClickHouse benchmarks${NC}"
    echo ""
    sleep 2

    # Setup demo directory
    mkdir -p "$DEMO_DIR"
    cd "$DEMO_DIR"

    # Demo steps
    run_demo_step "Convert" \
        "sql_trace_bench convert --source-db starrocks --target-db clickhouse --schema tpcc_schema.sql --traces tpcc_traces.jsonl --output ./output/" \
        "Converting StarRocks schema and traces to ClickHouse format"

    run_demo_step "Generate" \
        "sql_trace_bench generate --template-dir ./output/templates/ --param-model ./output/param_model.json --qps 100 --hotspot-ratio 0.8 --output ./workload/" \
        "Generating parameterized workload with custom settings"

    run_demo_step "Validate" \
        "sql_trace_bench run --workload-dir ./workload/ --db-config clickhouse.yaml --validate --report ./results/" \
        "Executing benchmark and validating results"

    echo -e "${GREEN}🎉 Demo completed! SQLTraceBench successfully converted and validated your cross-database benchmark.${NC}"
    echo ""
    echo -e "${BLUE}Try it yourself:${NC}"
    echo "go install github.com/turtacn/SQLTraceBench/cmd/sql_trace_bench@latest"
    echo ""
}

# Run the demo
main